$keys: C, 0, D, 0, E, F, 0, G, 0, A, 0, B, C, 0, D, 0, E, F, 0, G, 0, A, 0, B, C, 0, D, 0, E, F, 0, G, 0, A, 0, B;
$keysSharp: 0, Ch, 0, Dh, 0, 0, Fh, 0, Gh, 0, Ah, 0, 0, Ch, 0, Dh, 0, 0, Fh, 0, Gh, 0, Ah, 0, 0, Ch, 0, Dh, 0, 0, Fh, 0, Gh, 0, Ah, 0;
$keysFlat:  0, Db, 0, Eb, 0, 0, Gb, 0, Ab, 0, Bb, 0, 0, Db, 0, Eb, 0, 0, Gb, 0, Ab, 0, Bb, 0, 0, Db, 0, Eb, 0, 0, Gb, 0, Ab, 0, Bb, 0;

$keysSharpV: 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B';
$keysFlatV: 'C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B','C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B','C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B';
$keysRegular: C, 'C#', D, 'Eb', E, F, 'F#', G, 'Ab', A, 'Bb', B, C, 'C#', D, 'Eb', E, F, 'F#', G, 'Ab', A, 'Bb', B, C, 'C#', D, 'Eb', E, F, 'F#', G, 'Ab', A, 'Bb', B;
$keySignAsSharp: 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1,   0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1,    0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1;  // piano keys signature preference (for sharps)
$keyMinorSignAsSharp: 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,  0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,   0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0;


$numerals: 'I', 0, 'II', 0, 'III', 'IV', 0, 'V', 0, 'VI', 0, 'VII';
$numeralsLc: 'i', 0, 'ii', 0, 'iii', 'iv', 0, 'v', 0, 'vi', 0, 'vii';
$numeralsModern: '1', 0, '2', 0, '3', '4', 0, '5', 0, '6', 0, '7';
$minorScaleFlats:  0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1,   0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1,  0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1;

// Support double/triple/x amount of flats/sharps for roman/numeral chord notation via EXTENSIONS_ONLY = 1 or 2
// multi list will tend to bloat CSS with >=2 variations! Use EXTENSIONS_ONLY =1 (for sharps) and EXTENSIONS_ONLY=2 (for flats) to build additional css extension modules
$addSharps: 'h';//, 'hh'; //, 'hhh';
$addSharpsV: '#';//, '##'; //, '###';
$addFlats: 'b';//, 'bb'; //, 'bbb';

$EXTENSIONS_ONLY: 0;

// tranposable numeric keys
@mixin generate-numeric-keys-trans($numerals, $keys, $daKeys:0, $isMinor:0, $isMinorScale:0) {
	$m: if($isMinor==1, 'm', '');
	$s: if($isMinorScale==1, 'm', '');
	$keySigner: if($isMinorScale==1, $keyMinorSignAsSharp, $keySignAsSharp);
	@for $i from 1 through 12 {

		$k: nth($keys, 12 + $i);
		$theKeys: if($daKeys!=0, $daKeys, if(nth($keySigner,$i)==1, $keysSharpV, $keysFlatV));
		@if ($k != 0) {
		    $offset: ($i - 1);
			.song[key=#{$k}#{$s}] {
			@for $i from 1 through 12 {
			    $ks: if($isMinorScale==1, nth($minorScaleFlats, $i), 0);
				$n: nth($numerals, $i);
				@if ($n != 0) {
					@if ($EXTENSIONS_ONLY == 0) {
						$c: nth($theKeys, 12 + $i + $offset - $ks);
						>span>em[t=#{$n}]>* {
							&:before {
								content:'#{$c}#{$m}';
							}
						}
						@if ($isMinor == 0) {
							>span>em[b=#{$n}]>* {
								&:after {
									content:'/#{$c}';
								}
							}
						}
					}
					@if ($EXTENSIONS_ONLY == 0 or $EXTENSIONS_ONLY==1) {
						@for $a from 1 through length($addSharps) {
							$c: nth($keysSharpV,  $i + $offset + $a - $ks);
							$d: nth($addSharps, $a);
							>span>em[t=#{$d}#{$n}]>* {
								&:before {
									content:'#{$c}#{$m}';
								}
							}
							@if ($isMinor == 0) {
								>span>em[b=#{$d}#{$n}]>* {
									&:after {
										content:'/#{$c}';
									}
								}
							}
						}
					}
					@if ($EXTENSIONS_ONLY == 0 or $EXTENSIONS_ONLY==2) {
						@for $a from 1 through length($addFlats) {
							$c: nth($keysFlatV, 12 + $i + $offset - $a - $ks);
							$d: nth($addFlats, $a);
							>span>em[t=#{$d}#{$n}]>* {
								&:before {
									content:'#{$c}#{$m}';
								}
							}
							@if ($isMinor == 0) {
								>span>em[b=#{$d}#{$n}]>* {
									&:after {
										content:'/#{$c}';
									}
								}
							}
						}
					}
				}
			}
		}
	}
	}
}


@mixin generate-numeric-keys($keys, $keysV, $isMinor:0, $minorSuffix:'') {
	$m: if($isMinor==1, $minorSuffix, '');
	@for $i from 1 through 12 {
		$k: nth($keys, $i);
		@if ($k != 0) {
			$v: nth($keysV, $i);
			.song {
				>span>em[t=#{$k}]>* {
					&:before {
						content:'#{$v}#{$m}';
					}
				}
				@if ($isMinor == 0) {
					>span>em[b=#{$k}]>* {
						&:after {
							content:'/#{$v}';
						}
					}
				}
				@for $a from 1 through length($addSharps) {
					$d: nth($addSharps, $a);
					$c: nth($addSharpsV, $a);
					>span>em[t=#{$d}#{$k}] > * {
						&:before {
							content:'#{$c}#{$v}#{$m}';
						}
					}
					@if ($isMinor == 0) {
						>span>em[b=#{$d}#{$k}] > * {
							&:after {
								content:'/#{$c}#{$v}';
							}
						}
					}
				}
				@for $a from 1 through length($addFlats) {
					$d: nth($addFlats, $a);
					>span>em[t=#{$d}#{$k}] > * {
						&:before {
							content:'#{$d}#{$v}#{$m}';
						}
					}
					@if ($isMinor == 0) {
						>span>em[b=#{$d}#{$k}] > * {
							&:after {
								content:'/#{$d}#{$v}';
							}
						}
					}
				}
			}
		}
	}
}

@mixin generate-letter-keys($keys, $daKeys, $isMinor:0) {
	$m: if($isMinor==1, 'm', '');

	@for $i from 1 through 12 {
		$k: nth($keys, $i);
		@if ($k != 0) {
			$c: nth($daKeys, $i);
			.song {
				>span>em[t=#{$k}#{$m}]>* {
					&:before {
						content:'#{$c}#{$m}';
					}
				}
				@if ($isMinor == 0) {
					>span>em[b=#{$k}]>* {
						&:after {
							content:'/#{$c}';
						}
					}
				}
			}
		}

	}
}

@if ($EXTENSIONS_ONLY == 0) {
    // general letter keys
    ///*
    @include generate-letter-keys($keys, $keysSharpV);
    @include generate-letter-keys($keysSharp, $keysSharpV);
    @include generate-letter-keys($keysFlat, $keysFlatV);
    //*/

    // general letter keys with minor suffix
    @include generate-letter-keys($keys, $keysSharpV, 1);
    @include generate-letter-keys($keysSharp, $keysSharpV, 1);
    @include generate-letter-keys($keysFlat, $keysFlatV, 1);



    // numeral keys
    @include generate-numeric-keys($numerals, $numerals, 0);	// major roman
    @include generate-numeric-keys($numeralsLc, $numeralsLc, 1); // minor roman
    .nashville {
    	@include generate-numeric-keys($numerals, $numeralsModern, 0);	// major nashville
    	@include generate-numeric-keys($numeralsLc, $numeralsModern, 1, 'm'); // minor nashville
    }
}


// Below tranposable CSS truth table commented away. Bloats too many unused CSS permutations bad for performance!

// major numeral keys transposable
/*
@include generate-numeric-keys-trans($numerals, $keys);
@include generate-numeric-keys-trans($numerals, $keysSharp, $keysSharpV);
@include generate-numeric-keys-trans($numerals, $keysFlat, $keysFlatV);

@include generate-numeric-keys-trans($numerals, $keys, 0, 0, 1);
@include generate-numeric-keys-trans($numerals, $keysSharp, $keysSharpV, 0, 1);
@include generate-numeric-keys-trans($numerals, $keysFlat, $keysFlatV, 0, 1);
*/

// minor numeral keys transpoable
/*
@include generate-numeric-keys-trans($numeralsLc, $keys, 0, 1);
@include generate-numeric-keys-trans($numeralsLc, $keysSharp, $keysSharpV, 1);
@include generate-numeric-keys-trans($numeralsLc, $keysFlat, $keysFlatV, 1);

@include generate-numeric-keys-trans($numeralsLc, $keys, 0, 1, 1);
@include generate-numeric-keys-trans($numeralsLc, $keysSharp, $keysSharpV, 1, 1);
@include generate-numeric-keys-trans($numeralsLc, $keysFlat, $keysFlatV, 1, 1);
*/