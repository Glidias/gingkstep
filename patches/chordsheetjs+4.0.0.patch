diff --git a/node_modules/chordsheetjs/lib/parser/chord_pro_peg_parser.js b/node_modules/chordsheetjs/lib/parser/chord_pro_peg_parser.js
index 711c681..a8d9394 100644
--- a/node_modules/chordsheetjs/lib/parser/chord_pro_peg_parser.js
+++ b/node_modules/chordsheetjs/lib/parser/chord_pro_peg_parser.js
@@ -3,35 +3,21 @@
  *
  * http://pegjs.org/
  */
-"use strict";
-
-function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
-
-function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
-
-function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
-
-function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }
-
-function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
 
-function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
+"use strict";
 
 function peg$subclass(child, parent) {
-  function ctor() {
-    this.constructor = child;
-  }
-
+  function ctor() { this.constructor = child; }
   ctor.prototype = parent.prototype;
   child.prototype = new ctor();
 }
 
 function peg$SyntaxError(message, expected, found, location) {
-  this.message = message;
+  this.message  = message;
   this.expected = expected;
-  this.found = found;
+  this.found    = found;
   this.location = location;
-  this.name = "SyntaxError";
+  this.name     = "SyntaxError";
 
   if (typeof Error.captureStackTrace === "function") {
     Error.captureStackTrace(this, peg$SyntaxError);
@@ -40,50 +26,66 @@ function peg$SyntaxError(message, expected, found, location) {
 
 peg$subclass(peg$SyntaxError, Error);
 
-peg$SyntaxError.buildMessage = function (expected, found) {
+peg$SyntaxError.buildMessage = function(expected, found) {
   var DESCRIBE_EXPECTATION_FNS = {
-    literal: function literal(expectation) {
-      return "\"" + literalEscape(expectation.text) + "\"";
-    },
-    "class": function _class(expectation) {
-      var escapedParts = "",
-          i;
-
-      for (i = 0; i < expectation.parts.length; i++) {
-        escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);
-      }
+        literal: function(expectation) {
+          return "\"" + literalEscape(expectation.text) + "\"";
+        },
+
+        "class": function(expectation) {
+          var escapedParts = "",
+              i;
+
+          for (i = 0; i < expectation.parts.length; i++) {
+            escapedParts += expectation.parts[i] instanceof Array
+              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
+              : classEscape(expectation.parts[i]);
+          }
 
-      return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
-    },
-    any: function any(expectation) {
-      return "any character";
-    },
-    end: function end(expectation) {
-      return "end of input";
-    },
-    other: function other(expectation) {
-      return expectation.description;
-    }
-  };
+          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
+        },
+
+        any: function(expectation) {
+          return "any character";
+        },
+
+        end: function(expectation) {
+          return "end of input";
+        },
+
+        other: function(expectation) {
+          return expectation.description;
+        }
+      };
 
   function hex(ch) {
     return ch.charCodeAt(0).toString(16).toUpperCase();
   }
 
   function literalEscape(s) {
-    return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
-      return '\\x0' + hex(ch);
-    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
-      return '\\x' + hex(ch);
-    });
+    return s
+      .replace(/\\/g, '\\\\')
+      .replace(/"/g,  '\\"')
+      .replace(/\0/g, '\\0')
+      .replace(/\t/g, '\\t')
+      .replace(/\n/g, '\\n')
+      .replace(/\r/g, '\\r')
+      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
+      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
   }
 
   function classEscape(s) {
-    return s.replace(/\\/g, '\\\\').replace(/\]/g, '\\]').replace(/\^/g, '\\^').replace(/-/g, '\\-').replace(/\0/g, '\\0').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/[\x00-\x0F]/g, function (ch) {
-      return '\\x0' + hex(ch);
-    }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
-      return '\\x' + hex(ch);
-    });
+    return s
+      .replace(/\\/g, '\\\\')
+      .replace(/\]/g, '\\]')
+      .replace(/\^/g, '\\^')
+      .replace(/-/g,  '\\-')
+      .replace(/\0/g, '\\0')
+      .replace(/\t/g, '\\t')
+      .replace(/\n/g, '\\n')
+      .replace(/\r/g, '\\r')
+      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
+      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
   }
 
   function describeExpectation(expectation) {
@@ -92,8 +94,7 @@ peg$SyntaxError.buildMessage = function (expected, found) {
 
   function describeExpected(expected) {
     var descriptions = new Array(expected.length),
-        i,
-        j;
+        i, j;
 
     for (i = 0; i < expected.length; i++) {
       descriptions[i] = describeExpectation(expected[i]);
@@ -108,7 +109,6 @@ peg$SyntaxError.buildMessage = function (expected, found) {
           j++;
         }
       }
-
       descriptions.length = j;
     }
 
@@ -120,7 +120,9 @@ peg$SyntaxError.buildMessage = function (expected, found) {
         return descriptions[0] + " or " + descriptions[1];
 
       default:
-        return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
+        return descriptions.slice(0, -1).join(", ")
+          + ", or "
+          + descriptions[descriptions.length - 1];
     }
   }
 
@@ -135,188 +137,125 @@ function peg$parse(input, options) {
   options = options !== void 0 ? options : {};
 
   var peg$FAILED = {},
-      peg$startRuleFunctions = {
-    ChordSheet: peg$parseChordSheet
-  },
-      peg$startRuleFunction = peg$parseChordSheet,
-      peg$c0 = function peg$c0(lines, line) {
-    return {
-      type: "chordSheet",
-      lines: [].concat(_toConsumableArray(lines), [line])
-    };
-  },
-      peg$c1 = function peg$c1(line) {
-    return line;
-  },
-      peg$c2 = function peg$c2(lyrics, tokens, chord, comment) {
-    return {
-      type: "line",
-      items: [lyrics ? {
-        type: "chordLyricsPair",
-        chord: null,
-        lyrics: lyrics
-      } : null].concat(_toConsumableArray(tokens), [chord ? {
-        type: "chordLyricsPair",
-        chord: chord,
-        lyrics: null
-      } : null, comment ? {
-        type: "comment",
-        comment: comment
-      } : null]).filter(function (x) {
-        return x;
-      })
-    };
-  },
+
+      peg$startRuleFunctions = { ChordSheet: peg$parseChordSheet },
+      peg$startRuleFunction  = peg$parseChordSheet,
+
+      peg$c0 = function(lines, line) {
+        return {
+          type: "chordSheet",
+          lines: [...lines, line]
+        }
+      },
+      peg$c1 = function(line) {
+        return line
+      },
+      peg$c2 = function(lyrics, tokens, chord, comment) {
+        return {
+          type: "line",
+          items: [
+            lyrics ? {type: "chordLyricsPair", chord: null, lyrics} : null,
+            ...tokens,
+            chord ? {type: "chordLyricsPair", chord, lyrics: null} : null,
+            comment ? {type: "comment", comment} : null
+          ].filter(x => x)
+        }
+      },
       peg$c3 = "#",
       peg$c4 = peg$literalExpectation("#", false),
       peg$c5 = /^[^\r\n]/,
       peg$c6 = peg$classExpectation(["\r", "\n"], true, false),
-      peg$c7 = function peg$c7(comment) {
-    return comment;
-  },
-      peg$c8 = function peg$c8(chord, lyrics) {
-    return {
-      type: "chordLyricsPair",
-      chord: chord,
-      lyrics: lyrics
-    };
-  },
-      peg$c9 = function peg$c9(lyrics) {
-    return lyrics.map(function (c) {
-      return c["char"] || c;
-    }).join("");
-  },
+      peg$c7 = function(comment) {
+        return comment;
+      },
+      peg$c8 = function(chord, lyrics) {
+        return { type: "chordLyricsPair", chord, lyrics }
+      },
+      peg$c9 = function(lyrics) {
+        return lyrics.map(c => c.char || c).join("");
+      },
       peg$c10 = "[",
       peg$c11 = peg$literalExpectation("[", false),
       peg$c12 = "]",
       peg$c13 = peg$literalExpectation("]", false),
-      peg$c14 = function peg$c14(chord) {
-    return chord.map(function (c) {
-      return c["char"] || c;
-    }).join("");
-  },
+      peg$c14 = function(chord) {
+        return chord.map(c => c.char || c).join("");
+      },
       peg$c15 = "%{",
       peg$c16 = peg$literalExpectation("%{", false),
       peg$c17 = "}",
       peg$c18 = peg$literalExpectation("}", false),
-      peg$c19 = function peg$c19(variableName, expressions) {
-    return {
-      "type": "metaTernary",
-      variable: variableName,
-      expressions: expressions
-    };
-  },
+      peg$c19 = function(variableName, expressions) {
+        return {
+          "type": "metaTernary",
+          variable: variableName,
+          expressions
+        };
+      },
       peg$c20 = "|",
       peg$c21 = peg$literalExpectation("|", false),
-      peg$c22 = function peg$c22(trueExpression, falseExpression) {
-    return {
-      "type": "trueFalseExpression",
-      trueExpression: trueExpression,
-      falseExpression: falseExpression
-    };
-  },
-      peg$c23 = function peg$c23(falseExpression) {
-    return {
-      "type": "falseExpression",
-      falseExpression: falseExpression
-    };
-  },
+      peg$c22 = function(trueExpression, falseExpression) {
+        return {
+          "type": "trueFalseExpression",
+          trueExpression,
+          falseExpression
+        }
+      },
+      peg$c23 = function(falseExpression) {
+        return {"type": "falseExpression", falseExpression: falseExpression };
+      },
       peg$c24 = /^[a-zA-Z0-9\-_]/,
       peg$c25 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "-", "_"], false, false),
-      peg$c26 = function peg$c26() {
-    return {
-      type: "char",
-      "char": "]"
-    };
-  },
-      peg$c27 = function peg$c27() {
-    return {
-      type: "char",
-      "char": "\x7d"
-    };
-  },
+      peg$c26 = function() { return {type: "char", char: "]"}; },
+      peg$c27 = function() { return {type: "char", char: "\x7d"}; },
       peg$c28 = "%",
       peg$c29 = peg$literalExpectation("%", false),
-      peg$c30 = function peg$c30() {
-    return {
-      type: "char",
-      "char": "%"
-    };
-  },
-      peg$c31 = /^[^|[\]\\{}%#\r\n]/,
-      peg$c32 = peg$classExpectation(["|", "[", "]", "\\", "{", "}", "%", "#", "\r", "\n"], true, false),
+      peg$c30 = function() { return {type: "char", char: "%"}; },
+      peg$c31 = /^[^|[\]\\{}%\r\n]/,
+      peg$c32 = peg$classExpectation(["|", "[", "]", "\\", "{", "}", "%", "\r", "\n"], true, false),
       peg$c33 = "\\",
       peg$c34 = peg$literalExpectation("\\", false),
-      peg$c35 = function peg$c35() {
-    return {
-      type: "char",
-      "char": "\\"
-    };
-  },
-      peg$c36 = function peg$c36() {
-    return {
-      type: "char",
-      "char": "|"
-    };
-  },
-      peg$c37 = function peg$c37() {
-    return {
-      type: "char",
-      "char": "["
-    };
-  },
+      peg$c35 = function() { return {type: "char", char: "\\"}; },
+      peg$c36 = function() { return {type: "char", char: "|"}; },
+      peg$c37 = function() { return {type: "char", char: "["}; },
       peg$c38 = "{",
       peg$c39 = peg$literalExpectation("{", false),
-      peg$c40 = function peg$c40() {
-    return {
-      type: "char",
-      "char": "\x7b"
-    };
-  },
-      peg$c41 = function peg$c41() {
-    return {
-      type: "char",
-      "char": "#"
-    };
-  },
-      peg$c42 = function peg$c42(sequence) {
-    return sequence;
-  },
-      peg$c43 = function peg$c43(tagName, tagColonWithValue) {
-    return {
-      type: "tag",
-      name: tagName,
-      value: tagColonWithValue
-    };
-  },
-      peg$c44 = ":",
-      peg$c45 = peg$literalExpectation(":", false),
-      peg$c46 = function peg$c46(tagValue) {
-    return tagValue;
-  },
-      peg$c47 = /^[a-zA-Z\-_]/,
-      peg$c48 = peg$classExpectation([["a", "z"], ["A", "Z"], "-", "_"], false, false),
-      peg$c49 = /^[a-zA-Z0-9 ]/,
-      peg$c50 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], " "], false, false),
-      peg$c51 = peg$otherExpectation("whitespace"),
-      peg$c52 = /^[ \t\n\r]/,
-      peg$c53 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
-      peg$c54 = peg$otherExpectation("space"),
-      peg$c55 = /^[ \t]/,
-      peg$c56 = peg$classExpectation([" ", "\t"], false, false),
-      peg$c57 = "\n",
-      peg$c58 = peg$literalExpectation("\n", false),
-      peg$c59 = "\r",
-      peg$c60 = peg$literalExpectation("\r", false),
-      peg$currPos = 0,
-      peg$savedPos = 0,
-      peg$posDetailsCache = [{
-    line: 1,
-    column: 1
-  }],
-      peg$maxFailPos = 0,
-      peg$maxFailExpected = [],
-      peg$silentFails = 0,
+      peg$c40 = function() { return {type: "char", char: "\x7b"}; },
+      peg$c41 = function(sequence) { return sequence; },
+      peg$c42 = function(tagName, tagColonWithValue) {
+        return {
+          type: "tag",
+          name: tagName,
+          value: tagColonWithValue
+        }
+      },
+      peg$c43 = ":",
+      peg$c44 = peg$literalExpectation(":", false),
+      peg$c45 = function(tagValue) {
+        return tagValue;
+      },
+      peg$c46 = /^[a-zA-Z\-_]/,
+      peg$c47 = peg$classExpectation([["a", "z"], ["A", "Z"], "-", "_"], false, false),
+      peg$c48 = /^[a-zA-Z0-9 ]/,
+      peg$c49 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], " "], false, false),
+      peg$c50 = peg$otherExpectation("whitespace"),
+      peg$c51 = /^[ \t\n\r]/,
+      peg$c52 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false),
+      peg$c53 = peg$otherExpectation("space"),
+      peg$c54 = /^[ \t]/,
+      peg$c55 = peg$classExpectation([" ", "\t"], false, false),
+      peg$c56 = "\n",
+      peg$c57 = peg$literalExpectation("\n", false),
+      peg$c58 = "\r",
+      peg$c59 = peg$literalExpectation("\r", false),
+
+      peg$currPos          = 0,
+      peg$savedPos         = 0,
+      peg$posDetailsCache  = [{ line: 1, column: 1 }],
+      peg$maxFailPos       = 0,
+      peg$maxFailExpected  = [],
+      peg$silentFails      = 0,
+
       peg$result;
 
   if ("startRule" in options) {
@@ -336,67 +275,55 @@ function peg$parse(input, options) {
   }
 
   function expected(description, location) {
-    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);
-    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);
+    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)
+
+    throw peg$buildStructuredError(
+      [peg$otherExpectation(description)],
+      input.substring(peg$savedPos, peg$currPos),
+      location
+    );
   }
 
   function error(message, location) {
-    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);
+    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)
+
     throw peg$buildSimpleError(message, location);
   }
 
   function peg$literalExpectation(text, ignoreCase) {
-    return {
-      type: "literal",
-      text: text,
-      ignoreCase: ignoreCase
-    };
+    return { type: "literal", text: text, ignoreCase: ignoreCase };
   }
 
   function peg$classExpectation(parts, inverted, ignoreCase) {
-    return {
-      type: "class",
-      parts: parts,
-      inverted: inverted,
-      ignoreCase: ignoreCase
-    };
+    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
   }
 
   function peg$anyExpectation() {
-    return {
-      type: "any"
-    };
+    return { type: "any" };
   }
 
   function peg$endExpectation() {
-    return {
-      type: "end"
-    };
+    return { type: "end" };
   }
 
   function peg$otherExpectation(description) {
-    return {
-      type: "other",
-      description: description
-    };
+    return { type: "other", description: description };
   }
 
   function peg$computePosDetails(pos) {
-    var details = peg$posDetailsCache[pos],
-        p;
+    var details = peg$posDetailsCache[pos], p;
 
     if (details) {
       return details;
     } else {
       p = pos - 1;
-
       while (!peg$posDetailsCache[p]) {
         p--;
       }
 
       details = peg$posDetailsCache[p];
       details = {
-        line: details.line,
+        line:   details.line,
         column: details.column
       };
 
@@ -418,25 +345,24 @@ function peg$parse(input, options) {
 
   function peg$computeLocation(startPos, endPos) {
     var startPosDetails = peg$computePosDetails(startPos),
-        endPosDetails = peg$computePosDetails(endPos);
+        endPosDetails   = peg$computePosDetails(endPos);
+
     return {
       start: {
         offset: startPos,
-        line: startPosDetails.line,
+        line:   startPosDetails.line,
         column: startPosDetails.column
       },
       end: {
         offset: endPos,
-        line: endPosDetails.line,
+        line:   endPosDetails.line,
         column: endPosDetails.column
       }
     };
   }
 
   function peg$fail(expected) {
-    if (peg$currPos < peg$maxFailPos) {
-      return;
-    }
+    if (peg$currPos < peg$maxFailPos) { return; }
 
     if (peg$currPos > peg$maxFailPos) {
       peg$maxFailPos = peg$currPos;
@@ -451,27 +377,29 @@ function peg$parse(input, options) {
   }
 
   function peg$buildStructuredError(expected, found, location) {
-    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
+    return new peg$SyntaxError(
+      peg$SyntaxError.buildMessage(expected, found),
+      expected,
+      found,
+      location
+    );
   }
 
   function peg$parseChordSheet() {
     var s0, s1, s2;
+
     s0 = peg$currPos;
     s1 = [];
     s2 = peg$parseLineWithNewline();
-
     while (s2 !== peg$FAILED) {
       s1.push(s2);
       s2 = peg$parseLineWithNewline();
     }
-
     if (s1 !== peg$FAILED) {
       s2 = peg$parseLine();
-
       if (s2 === peg$FAILED) {
         s2 = null;
       }
-
       if (s2 !== peg$FAILED) {
         peg$savedPos = s0;
         s1 = peg$c0(s1, s2);
@@ -490,12 +418,11 @@ function peg$parse(input, options) {
 
   function peg$parseLineWithNewline() {
     var s0, s1, s2;
+
     s0 = peg$currPos;
     s1 = peg$parseLine();
-
     if (s1 !== peg$FAILED) {
       s2 = peg$parseNewLine();
-
       if (s2 !== peg$FAILED) {
         peg$savedPos = s0;
         s1 = peg$c1(s1);
@@ -514,36 +441,29 @@ function peg$parse(input, options) {
 
   function peg$parseLine() {
     var s0, s1, s2, s3, s4;
+
     s0 = peg$currPos;
     s1 = peg$parseLyrics();
-
     if (s1 === peg$FAILED) {
       s1 = null;
     }
-
     if (s1 !== peg$FAILED) {
       s2 = [];
       s3 = peg$parseToken();
-
       while (s3 !== peg$FAILED) {
         s2.push(s3);
         s3 = peg$parseToken();
       }
-
       if (s2 !== peg$FAILED) {
         s3 = peg$parseChord();
-
         if (s3 === peg$FAILED) {
           s3 = null;
         }
-
         if (s3 !== peg$FAILED) {
           s4 = peg$parseComment();
-
           if (s4 === peg$FAILED) {
             s4 = null;
           }
-
           if (s4 !== peg$FAILED) {
             peg$savedPos = s0;
             s1 = peg$c2(s1, s2, s3, s4);
@@ -570,11 +490,10 @@ function peg$parse(input, options) {
 
   function peg$parseToken() {
     var s0;
-    s0 = peg$parseTag();
 
+    s0 = peg$parseTag();
     if (s0 === peg$FAILED) {
       s0 = peg$parseChordLyricsPair();
-
       if (s0 === peg$FAILED) {
         s0 = peg$parseMetaTernary();
       }
@@ -585,61 +504,45 @@ function peg$parse(input, options) {
 
   function peg$parseComment() {
     var s0, s1, s2, s3, s4, s5;
+
     s0 = peg$currPos;
     s1 = peg$parseSpace();
-
     if (s1 === peg$FAILED) {
       s1 = null;
     }
-
     if (s1 !== peg$FAILED) {
       if (input.charCodeAt(peg$currPos) === 35) {
         s2 = peg$c3;
         peg$currPos++;
       } else {
         s2 = peg$FAILED;
-
-        if (peg$silentFails === 0) {
-          peg$fail(peg$c4);
-        }
+        if (peg$silentFails === 0) { peg$fail(peg$c4); }
       }
-
       if (s2 !== peg$FAILED) {
         s3 = peg$currPos;
         s4 = [];
-
         if (peg$c5.test(input.charAt(peg$currPos))) {
           s5 = input.charAt(peg$currPos);
           peg$currPos++;
         } else {
           s5 = peg$FAILED;
-
-          if (peg$silentFails === 0) {
-            peg$fail(peg$c6);
-          }
+          if (peg$silentFails === 0) { peg$fail(peg$c6); }
         }
-
         while (s5 !== peg$FAILED) {
           s4.push(s5);
-
           if (peg$c5.test(input.charAt(peg$currPos))) {
             s5 = input.charAt(peg$currPos);
             peg$currPos++;
           } else {
             s5 = peg$FAILED;
-
-            if (peg$silentFails === 0) {
-              peg$fail(peg$c6);
-            }
+            if (peg$silentFails === 0) { peg$fail(peg$c6); }
           }
         }
-
         if (s4 !== peg$FAILED) {
           s3 = input.substring(s3, peg$currPos);
         } else {
           s3 = s4;
         }
-
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c7(s3);
@@ -662,12 +565,11 @@ function peg$parse(input, options) {
 
   function peg$parseChordLyricsPair() {
     var s0, s1, s2;
+
     s0 = peg$currPos;
     s1 = peg$parseChord();
-
     if (s1 !== peg$FAILED) {
       s2 = peg$parseLyrics();
-
       if (s2 !== peg$FAILED) {
         peg$savedPos = s0;
         s1 = peg$c8(s1, s2);
@@ -686,10 +588,10 @@ function peg$parse(input, options) {
 
   function peg$parseLyrics() {
     var s0, s1, s2;
+
     s0 = peg$currPos;
     s1 = [];
     s2 = peg$parseLyricsChar();
-
     if (s2 !== peg$FAILED) {
       while (s2 !== peg$FAILED) {
         s1.push(s2);
@@ -698,64 +600,52 @@ function peg$parse(input, options) {
     } else {
       s1 = peg$FAILED;
     }
-
     if (s1 !== peg$FAILED) {
       peg$savedPos = s0;
       s1 = peg$c9(s1);
     }
-
     s0 = s1;
+
     return s0;
   }
 
   function peg$parseChord() {
     var s0, s1, s2, s3, s4;
+
     s0 = peg$currPos;
     s1 = peg$currPos;
     peg$silentFails++;
     s2 = peg$parseEscape();
     peg$silentFails--;
-
     if (s2 === peg$FAILED) {
       s1 = void 0;
     } else {
       peg$currPos = s1;
       s1 = peg$FAILED;
     }
-
     if (s1 !== peg$FAILED) {
       if (input.charCodeAt(peg$currPos) === 91) {
         s2 = peg$c10;
         peg$currPos++;
       } else {
         s2 = peg$FAILED;
-
-        if (peg$silentFails === 0) {
-          peg$fail(peg$c11);
-        }
+        if (peg$silentFails === 0) { peg$fail(peg$c11); }
       }
-
       if (s2 !== peg$FAILED) {
         s3 = [];
         s4 = peg$parseChar();
-
         while (s4 !== peg$FAILED) {
           s3.push(s4);
           s4 = peg$parseChar();
         }
-
         if (s3 !== peg$FAILED) {
           if (input.charCodeAt(peg$currPos) === 93) {
             s4 = peg$c12;
             peg$currPos++;
           } else {
             s4 = peg$FAILED;
-
-            if (peg$silentFails === 0) {
-              peg$fail(peg$c13);
-            }
+            if (peg$silentFails === 0) { peg$fail(peg$c13); }
           }
-
           if (s4 !== peg$FAILED) {
             peg$savedPos = s0;
             s1 = peg$c14(s3);
@@ -782,61 +672,45 @@ function peg$parse(input, options) {
 
   function peg$parseMetaTernary() {
     var s0, s1, s2, s3, s4, s5, s6, s7;
-    s0 = peg$currPos;
 
+    s0 = peg$currPos;
     if (input.substr(peg$currPos, 2) === peg$c15) {
       s1 = peg$c15;
       peg$currPos += 2;
     } else {
       s1 = peg$FAILED;
-
-      if (peg$silentFails === 0) {
-        peg$fail(peg$c16);
-      }
+      if (peg$silentFails === 0) { peg$fail(peg$c16); }
     }
-
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
-
       if (s2 !== peg$FAILED) {
         s3 = peg$currPos;
         s4 = peg$parseMetaVariableName();
-
         if (s4 === peg$FAILED) {
           s4 = null;
         }
-
         if (s4 !== peg$FAILED) {
           s3 = input.substring(s3, peg$currPos);
         } else {
           s3 = s4;
         }
-
         if (s3 !== peg$FAILED) {
           s4 = peg$parse_();
-
           if (s4 !== peg$FAILED) {
             s5 = peg$parseMetaTernaryTrueFalseExpressions();
-
             if (s5 === peg$FAILED) {
               s5 = null;
             }
-
             if (s5 !== peg$FAILED) {
               s6 = peg$parse_();
-
               if (s6 !== peg$FAILED) {
                 if (input.charCodeAt(peg$currPos) === 125) {
                   s7 = peg$c17;
                   peg$currPos++;
                 } else {
                   s7 = peg$FAILED;
-
-                  if (peg$silentFails === 0) {
-                    peg$fail(peg$c18);
-                  }
+                  if (peg$silentFails === 0) { peg$fail(peg$c18); }
                 }
-
                 if (s7 !== peg$FAILED) {
                   peg$savedPos = s0;
                   s1 = peg$c19(s3, s5);
@@ -875,38 +749,28 @@ function peg$parse(input, options) {
 
   function peg$parseMetaTernaryTrueFalseExpressions() {
     var s0, s1, s2, s3, s4, s5, s6;
-    s0 = peg$currPos;
 
+    s0 = peg$currPos;
     if (input.charCodeAt(peg$currPos) === 124) {
       s1 = peg$c20;
       peg$currPos++;
     } else {
       s1 = peg$FAILED;
-
-      if (peg$silentFails === 0) {
-        peg$fail(peg$c21);
-      }
+      if (peg$silentFails === 0) { peg$fail(peg$c21); }
     }
-
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
-
       if (s2 !== peg$FAILED) {
         s3 = peg$parseMetaExpression();
-
         if (s3 !== peg$FAILED) {
           s4 = peg$parse_();
-
           if (s4 !== peg$FAILED) {
             s5 = peg$parseMetaTernaryFalseExpression();
-
             if (s5 === peg$FAILED) {
               s5 = null;
             }
-
             if (s5 !== peg$FAILED) {
               s6 = peg$parse_();
-
               if (s6 !== peg$FAILED) {
                 peg$savedPos = s0;
                 s1 = peg$c22(s3, s5);
@@ -941,25 +805,19 @@ function peg$parse(input, options) {
 
   function peg$parseMetaTernaryFalseExpression() {
     var s0, s1, s2, s3;
-    s0 = peg$currPos;
 
+    s0 = peg$currPos;
     if (input.charCodeAt(peg$currPos) === 124) {
       s1 = peg$c20;
       peg$currPos++;
     } else {
       s1 = peg$FAILED;
-
-      if (peg$silentFails === 0) {
-        peg$fail(peg$c21);
-      }
+      if (peg$silentFails === 0) { peg$fail(peg$c21); }
     }
-
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
-
       if (s2 !== peg$FAILED) {
         s3 = peg$parseMetaExpression();
-
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c23(s3);
@@ -982,32 +840,24 @@ function peg$parse(input, options) {
 
   function peg$parseMetaVariableName() {
     var s0, s1;
-    s0 = [];
 
+    s0 = [];
     if (peg$c24.test(input.charAt(peg$currPos))) {
       s1 = input.charAt(peg$currPos);
       peg$currPos++;
     } else {
       s1 = peg$FAILED;
-
-      if (peg$silentFails === 0) {
-        peg$fail(peg$c25);
-      }
+      if (peg$silentFails === 0) { peg$fail(peg$c25); }
     }
-
     if (s1 !== peg$FAILED) {
       while (s1 !== peg$FAILED) {
         s0.push(s1);
-
         if (peg$c24.test(input.charAt(peg$currPos))) {
           s1 = input.charAt(peg$currPos);
           peg$currPos++;
         } else {
           s1 = peg$FAILED;
-
-          if (peg$silentFails === 0) {
-            peg$fail(peg$c25);
-          }
+          if (peg$silentFails === 0) { peg$fail(peg$c25); }
         }
       }
     } else {
@@ -1019,11 +869,11 @@ function peg$parse(input, options) {
 
   function peg$parseMetaExpression() {
     var s0, s1, s2, s3;
+
     s0 = [];
     s1 = peg$currPos;
     s2 = [];
     s3 = peg$parseChar();
-
     if (s3 !== peg$FAILED) {
       while (s3 !== peg$FAILED) {
         s2.push(s3);
@@ -1032,24 +882,20 @@ function peg$parse(input, options) {
     } else {
       s2 = peg$FAILED;
     }
-
     if (s2 !== peg$FAILED) {
       s1 = input.substring(s1, peg$currPos);
     } else {
       s1 = s2;
     }
-
     if (s1 === peg$FAILED) {
       s1 = peg$parseMetaTernary();
     }
-
     if (s1 !== peg$FAILED) {
       while (s1 !== peg$FAILED) {
         s0.push(s1);
         s1 = peg$currPos;
         s2 = [];
         s3 = peg$parseChar();
-
         if (s3 !== peg$FAILED) {
           while (s3 !== peg$FAILED) {
             s2.push(s3);
@@ -1058,13 +904,11 @@ function peg$parse(input, options) {
         } else {
           s2 = peg$FAILED;
         }
-
         if (s2 !== peg$FAILED) {
           s1 = input.substring(s1, peg$currPos);
         } else {
           s1 = s2;
         }
-
         if (s1 === peg$FAILED) {
           s1 = peg$parseMetaTernary();
         }
@@ -1078,69 +922,49 @@ function peg$parse(input, options) {
 
   function peg$parseLyricsChar() {
     var s0, s1;
-    s0 = peg$parseChar();
 
+    s0 = peg$parseChar();
     if (s0 === peg$FAILED) {
       s0 = peg$currPos;
-
       if (input.charCodeAt(peg$currPos) === 93) {
         s1 = peg$c12;
         peg$currPos++;
       } else {
         s1 = peg$FAILED;
-
-        if (peg$silentFails === 0) {
-          peg$fail(peg$c13);
-        }
+        if (peg$silentFails === 0) { peg$fail(peg$c13); }
       }
-
       if (s1 !== peg$FAILED) {
         peg$savedPos = s0;
         s1 = peg$c26();
       }
-
       s0 = s1;
-
       if (s0 === peg$FAILED) {
         s0 = peg$currPos;
-
         if (input.charCodeAt(peg$currPos) === 125) {
           s1 = peg$c17;
           peg$currPos++;
         } else {
           s1 = peg$FAILED;
-
-          if (peg$silentFails === 0) {
-            peg$fail(peg$c18);
-          }
+          if (peg$silentFails === 0) { peg$fail(peg$c18); }
         }
-
         if (s1 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c27();
         }
-
         s0 = s1;
-
         if (s0 === peg$FAILED) {
           s0 = peg$currPos;
-
           if (input.charCodeAt(peg$currPos) === 37) {
             s1 = peg$c28;
             peg$currPos++;
           } else {
             s1 = peg$FAILED;
-
-            if (peg$silentFails === 0) {
-              peg$fail(peg$c29);
-            }
+            if (peg$silentFails === 0) { peg$fail(peg$c29); }
           }
-
           if (s1 !== peg$FAILED) {
             peg$savedPos = s0;
             s1 = peg$c30();
           }
-
           s0 = s1;
         }
       }
@@ -1157,194 +981,118 @@ function peg$parse(input, options) {
       peg$currPos++;
     } else {
       s0 = peg$FAILED;
-
-      if (peg$silentFails === 0) {
-        peg$fail(peg$c32);
-      }
+      if (peg$silentFails === 0) { peg$fail(peg$c32); }
     }
-
     if (s0 === peg$FAILED) {
       s0 = peg$currPos;
       s1 = peg$parseEscape();
-
       if (s1 !== peg$FAILED) {
         s2 = peg$currPos;
-
         if (input.charCodeAt(peg$currPos) === 92) {
           s3 = peg$c33;
           peg$currPos++;
         } else {
           s3 = peg$FAILED;
-
-          if (peg$silentFails === 0) {
-            peg$fail(peg$c34);
-          }
+          if (peg$silentFails === 0) { peg$fail(peg$c34); }
         }
-
         if (s3 !== peg$FAILED) {
           peg$savedPos = s2;
           s3 = peg$c35();
         }
-
         s2 = s3;
-
         if (s2 === peg$FAILED) {
           s2 = peg$currPos;
-
           if (input.charCodeAt(peg$currPos) === 124) {
             s3 = peg$c20;
             peg$currPos++;
           } else {
             s3 = peg$FAILED;
-
-            if (peg$silentFails === 0) {
-              peg$fail(peg$c21);
-            }
+            if (peg$silentFails === 0) { peg$fail(peg$c21); }
           }
-
           if (s3 !== peg$FAILED) {
             peg$savedPos = s2;
             s3 = peg$c36();
           }
-
           s2 = s3;
-
           if (s2 === peg$FAILED) {
             s2 = peg$currPos;
-
             if (input.charCodeAt(peg$currPos) === 91) {
               s3 = peg$c10;
               peg$currPos++;
             } else {
               s3 = peg$FAILED;
-
-              if (peg$silentFails === 0) {
-                peg$fail(peg$c11);
-              }
+              if (peg$silentFails === 0) { peg$fail(peg$c11); }
             }
-
             if (s3 !== peg$FAILED) {
               peg$savedPos = s2;
               s3 = peg$c37();
             }
-
             s2 = s3;
-
             if (s2 === peg$FAILED) {
               s2 = peg$currPos;
-
               if (input.charCodeAt(peg$currPos) === 93) {
                 s3 = peg$c12;
                 peg$currPos++;
               } else {
                 s3 = peg$FAILED;
-
-                if (peg$silentFails === 0) {
-                  peg$fail(peg$c13);
-                }
+                if (peg$silentFails === 0) { peg$fail(peg$c13); }
               }
-
               if (s3 !== peg$FAILED) {
                 peg$savedPos = s2;
                 s3 = peg$c26();
               }
-
               s2 = s3;
-
               if (s2 === peg$FAILED) {
                 s2 = peg$currPos;
-
                 if (input.charCodeAt(peg$currPos) === 123) {
                   s3 = peg$c38;
                   peg$currPos++;
                 } else {
                   s3 = peg$FAILED;
-
-                  if (peg$silentFails === 0) {
-                    peg$fail(peg$c39);
-                  }
+                  if (peg$silentFails === 0) { peg$fail(peg$c39); }
                 }
-
                 if (s3 !== peg$FAILED) {
                   peg$savedPos = s2;
                   s3 = peg$c40();
                 }
-
                 s2 = s3;
-
                 if (s2 === peg$FAILED) {
                   s2 = peg$currPos;
-
                   if (input.charCodeAt(peg$currPos) === 125) {
                     s3 = peg$c17;
                     peg$currPos++;
                   } else {
                     s3 = peg$FAILED;
-
-                    if (peg$silentFails === 0) {
-                      peg$fail(peg$c18);
-                    }
+                    if (peg$silentFails === 0) { peg$fail(peg$c18); }
                   }
-
                   if (s3 !== peg$FAILED) {
                     peg$savedPos = s2;
                     s3 = peg$c27();
                   }
-
                   s2 = s3;
-
                   if (s2 === peg$FAILED) {
                     s2 = peg$currPos;
-
                     if (input.charCodeAt(peg$currPos) === 37) {
                       s3 = peg$c28;
                       peg$currPos++;
                     } else {
                       s3 = peg$FAILED;
-
-                      if (peg$silentFails === 0) {
-                        peg$fail(peg$c29);
-                      }
+                      if (peg$silentFails === 0) { peg$fail(peg$c29); }
                     }
-
                     if (s3 !== peg$FAILED) {
                       peg$savedPos = s2;
                       s3 = peg$c30();
                     }
-
                     s2 = s3;
-
-                    if (s2 === peg$FAILED) {
-                      s2 = peg$currPos;
-
-                      if (input.charCodeAt(peg$currPos) === 35) {
-                        s3 = peg$c3;
-                        peg$currPos++;
-                      } else {
-                        s3 = peg$FAILED;
-
-                        if (peg$silentFails === 0) {
-                          peg$fail(peg$c4);
-                        }
-                      }
-
-                      if (s3 !== peg$FAILED) {
-                        peg$savedPos = s2;
-                        s3 = peg$c41();
-                      }
-
-                      s2 = s3;
-                    }
                   }
                 }
               }
             }
           }
         }
-
         if (s2 !== peg$FAILED) {
           peg$savedPos = s0;
-          s1 = peg$c42(s2);
+          s1 = peg$c41(s2);
           s0 = s1;
         } else {
           peg$currPos = s0;
@@ -1361,60 +1109,45 @@ function peg$parse(input, options) {
 
   function peg$parseTag() {
     var s0, s1, s2, s3, s4, s5, s6, s7;
-    s0 = peg$currPos;
 
+    s0 = peg$currPos;
     if (input.charCodeAt(peg$currPos) === 123) {
       s1 = peg$c38;
       peg$currPos++;
     } else {
       s1 = peg$FAILED;
-
-      if (peg$silentFails === 0) {
-        peg$fail(peg$c39);
-      }
+      if (peg$silentFails === 0) { peg$fail(peg$c39); }
     }
-
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
-
       if (s2 !== peg$FAILED) {
         s3 = peg$currPos;
         s4 = peg$parseTagName();
-
         if (s4 !== peg$FAILED) {
           s3 = input.substring(s3, peg$currPos);
         } else {
           s3 = s4;
         }
-
         if (s3 !== peg$FAILED) {
           s4 = peg$parse_();
-
           if (s4 !== peg$FAILED) {
             s5 = peg$parseTagColonWithValue();
-
             if (s5 === peg$FAILED) {
               s5 = null;
             }
-
             if (s5 !== peg$FAILED) {
               s6 = peg$parse_();
-
               if (s6 !== peg$FAILED) {
                 if (input.charCodeAt(peg$currPos) === 125) {
                   s7 = peg$c17;
                   peg$currPos++;
                 } else {
                   s7 = peg$FAILED;
-
-                  if (peg$silentFails === 0) {
-                    peg$fail(peg$c18);
-                  }
+                  if (peg$silentFails === 0) { peg$fail(peg$c18); }
                 }
-
                 if (s7 !== peg$FAILED) {
                   peg$savedPos = s0;
-                  s1 = peg$c43(s3, s5);
+                  s1 = peg$c42(s3, s5);
                   s0 = s1;
                 } else {
                   peg$currPos = s0;
@@ -1450,35 +1183,28 @@ function peg$parse(input, options) {
 
   function peg$parseTagColonWithValue() {
     var s0, s1, s2, s3, s4;
-    s0 = peg$currPos;
 
+    s0 = peg$currPos;
     if (input.charCodeAt(peg$currPos) === 58) {
-      s1 = peg$c44;
+      s1 = peg$c43;
       peg$currPos++;
     } else {
       s1 = peg$FAILED;
-
-      if (peg$silentFails === 0) {
-        peg$fail(peg$c45);
-      }
+      if (peg$silentFails === 0) { peg$fail(peg$c44); }
     }
-
     if (s1 !== peg$FAILED) {
       s2 = peg$parse_();
-
       if (s2 !== peg$FAILED) {
         s3 = peg$currPos;
         s4 = peg$parseTagValue();
-
         if (s4 !== peg$FAILED) {
           s3 = input.substring(s3, peg$currPos);
         } else {
           s3 = s4;
         }
-
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
-          s1 = peg$c46(s3);
+          s1 = peg$c45(s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
@@ -1498,32 +1224,24 @@ function peg$parse(input, options) {
 
   function peg$parseTagName() {
     var s0, s1;
-    s0 = [];
 
-    if (peg$c47.test(input.charAt(peg$currPos))) {
+    s0 = [];
+    if (peg$c46.test(input.charAt(peg$currPos))) {
       s1 = input.charAt(peg$currPos);
       peg$currPos++;
     } else {
       s1 = peg$FAILED;
-
-      if (peg$silentFails === 0) {
-        peg$fail(peg$c48);
-      }
+      if (peg$silentFails === 0) { peg$fail(peg$c47); }
     }
-
     if (s1 !== peg$FAILED) {
       while (s1 !== peg$FAILED) {
         s0.push(s1);
-
-        if (peg$c47.test(input.charAt(peg$currPos))) {
+        if (peg$c46.test(input.charAt(peg$currPos))) {
           s1 = input.charAt(peg$currPos);
           peg$currPos++;
         } else {
           s1 = peg$FAILED;
-
-          if (peg$silentFails === 0) {
-            peg$fail(peg$c48);
-          }
+          if (peg$silentFails === 0) { peg$fail(peg$c47); }
         }
       }
     } else {
@@ -1535,32 +1253,24 @@ function peg$parse(input, options) {
 
   function peg$parseTagValue() {
     var s0, s1;
-    s0 = [];
 
-    if (peg$c49.test(input.charAt(peg$currPos))) {
+    s0 = [];
+    if (peg$c48.test(input.charAt(peg$currPos))) {
       s1 = input.charAt(peg$currPos);
       peg$currPos++;
     } else {
       s1 = peg$FAILED;
-
-      if (peg$silentFails === 0) {
-        peg$fail(peg$c50);
-      }
+      if (peg$silentFails === 0) { peg$fail(peg$c49); }
     }
-
     if (s1 !== peg$FAILED) {
       while (s1 !== peg$FAILED) {
         s0.push(s1);
-
-        if (peg$c49.test(input.charAt(peg$currPos))) {
+        if (peg$c48.test(input.charAt(peg$currPos))) {
           s1 = input.charAt(peg$currPos);
           peg$currPos++;
         } else {
           s1 = peg$FAILED;
-
-          if (peg$silentFails === 0) {
-            peg$fail(peg$c50);
-          }
+          if (peg$silentFails === 0) { peg$fail(peg$c49); }
         }
       }
     } else {
@@ -1572,43 +1282,30 @@ function peg$parse(input, options) {
 
   function peg$parse_() {
     var s0, s1;
+
     peg$silentFails++;
     s0 = [];
-
-    if (peg$c52.test(input.charAt(peg$currPos))) {
+    if (peg$c51.test(input.charAt(peg$currPos))) {
       s1 = input.charAt(peg$currPos);
       peg$currPos++;
     } else {
       s1 = peg$FAILED;
-
-      if (peg$silentFails === 0) {
-        peg$fail(peg$c53);
-      }
+      if (peg$silentFails === 0) { peg$fail(peg$c52); }
     }
-
     while (s1 !== peg$FAILED) {
       s0.push(s1);
-
-      if (peg$c52.test(input.charAt(peg$currPos))) {
+      if (peg$c51.test(input.charAt(peg$currPos))) {
         s1 = input.charAt(peg$currPos);
         peg$currPos++;
       } else {
         s1 = peg$FAILED;
-
-        if (peg$silentFails === 0) {
-          peg$fail(peg$c53);
-        }
+        if (peg$silentFails === 0) { peg$fail(peg$c52); }
       }
     }
-
     peg$silentFails--;
-
     if (s0 === peg$FAILED) {
       s1 = peg$FAILED;
-
-      if (peg$silentFails === 0) {
-        peg$fail(peg$c51);
-      }
+      if (peg$silentFails === 0) { peg$fail(peg$c50); }
     }
 
     return s0;
@@ -1616,47 +1313,34 @@ function peg$parse(input, options) {
 
   function peg$parseSpace() {
     var s0, s1;
+
     peg$silentFails++;
     s0 = [];
-
-    if (peg$c55.test(input.charAt(peg$currPos))) {
+    if (peg$c54.test(input.charAt(peg$currPos))) {
       s1 = input.charAt(peg$currPos);
       peg$currPos++;
     } else {
       s1 = peg$FAILED;
-
-      if (peg$silentFails === 0) {
-        peg$fail(peg$c56);
-      }
+      if (peg$silentFails === 0) { peg$fail(peg$c55); }
     }
-
     if (s1 !== peg$FAILED) {
       while (s1 !== peg$FAILED) {
         s0.push(s1);
-
-        if (peg$c55.test(input.charAt(peg$currPos))) {
+        if (peg$c54.test(input.charAt(peg$currPos))) {
           s1 = input.charAt(peg$currPos);
           peg$currPos++;
         } else {
           s1 = peg$FAILED;
-
-          if (peg$silentFails === 0) {
-            peg$fail(peg$c56);
-          }
+          if (peg$silentFails === 0) { peg$fail(peg$c55); }
         }
       }
     } else {
       s0 = peg$FAILED;
     }
-
     peg$silentFails--;
-
     if (s0 === peg$FAILED) {
       s1 = peg$FAILED;
-
-      if (peg$silentFails === 0) {
-        peg$fail(peg$c54);
-      }
+      if (peg$silentFails === 0) { peg$fail(peg$c53); }
     }
 
     return s0;
@@ -1664,11 +1348,10 @@ function peg$parse(input, options) {
 
   function peg$parseNewLine() {
     var s0;
-    s0 = peg$parseCarriageReturn();
 
+    s0 = peg$parseCarriageReturn();
     if (s0 === peg$FAILED) {
       s0 = peg$parseLineFeed();
-
       if (s0 === peg$FAILED) {
         s0 = peg$parseCarriageReturnLineFeed();
       }
@@ -1679,12 +1362,11 @@ function peg$parse(input, options) {
 
   function peg$parseCarriageReturnLineFeed() {
     var s0, s1, s2;
+
     s0 = peg$currPos;
     s1 = peg$parseCarriageReturn();
-
     if (s1 !== peg$FAILED) {
       s2 = peg$parseLineFeed();
-
       if (s2 !== peg$FAILED) {
         s1 = [s1, s2];
         s0 = s1;
@@ -1704,14 +1386,11 @@ function peg$parse(input, options) {
     var s0;
 
     if (input.charCodeAt(peg$currPos) === 10) {
-      s0 = peg$c57;
+      s0 = peg$c56;
       peg$currPos++;
     } else {
       s0 = peg$FAILED;
-
-      if (peg$silentFails === 0) {
-        peg$fail(peg$c58);
-      }
+      if (peg$silentFails === 0) { peg$fail(peg$c57); }
     }
 
     return s0;
@@ -1721,14 +1400,11 @@ function peg$parse(input, options) {
     var s0;
 
     if (input.charCodeAt(peg$currPos) === 13) {
-      s0 = peg$c59;
+      s0 = peg$c58;
       peg$currPos++;
     } else {
       s0 = peg$FAILED;
-
-      if (peg$silentFails === 0) {
-        peg$fail(peg$c60);
-      }
+      if (peg$silentFails === 0) { peg$fail(peg$c59); }
     }
 
     return s0;
@@ -1742,27 +1418,7 @@ function peg$parse(input, options) {
       peg$currPos++;
     } else {
       s0 = peg$FAILED;
-
-      if (peg$silentFails === 0) {
-        peg$fail(peg$c34);
-      }
-    }
-
-    return s0;
-  }
-
-  function peg$parsePound() {
-    var s0;
-
-    if (input.charCodeAt(peg$currPos) === 35) {
-      s0 = peg$c3;
-      peg$currPos++;
-    } else {
-      s0 = peg$FAILED;
-
-      if (peg$silentFails === 0) {
-        peg$fail(peg$c4);
-      }
+      if (peg$silentFails === 0) { peg$fail(peg$c34); }
     }
 
     return s0;
@@ -1777,11 +1433,17 @@ function peg$parse(input, options) {
       peg$fail(peg$endExpectation());
     }
 
-    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
+    throw peg$buildStructuredError(
+      peg$maxFailExpected,
+      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
+      peg$maxFailPos < input.length
+        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
+        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
+    );
   }
 }
 
 module.exports = {
   SyntaxError: peg$SyntaxError,
-  parse: peg$parse
+  parse:       peg$parse
 };
